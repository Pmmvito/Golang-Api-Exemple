basePath: /api/v1
definitions:
  handler.APIError:
    properties:
      details: {}
      message:
        type: string
    type: object
  handler.APISuccess:
    properties:
      data: {}
      message:
        type: string
    type: object
  handler.AuthResponse:
    properties:
      expiresAt:
        type: string
      token:
        type: string
      user:
        $ref: '#/definitions/handler.UserResponse'
    type: object
  handler.AuthSuccessResponse:
    properties:
      data:
        $ref: '#/definitions/handler.AuthResponse'
      message:
        type: string
    type: object
  handler.CategoryAggregate:
    properties:
      category:
        $ref: '#/definitions/handler.CategoryResponse'
      total:
        type: number
    type: object
  handler.CategoryItemSuccess:
    properties:
      data:
        $ref: '#/definitions/handler.CategoryResponse'
      message:
        type: string
    type: object
  handler.CategoryListSuccess:
    properties:
      data:
        items:
          $ref: '#/definitions/handler.CategoryResponse'
        type: array
      message:
        type: string
    type: object
  handler.CategoryRequest:
    properties:
      active:
        type: boolean
      colorHex:
        type: string
      icon:
        type: string
      name:
        type: string
      order:
        type: integer
      type:
        type: string
    type: object
  handler.CategoryResponse:
    properties:
      active:
        type: boolean
      colorHex:
        type: string
      createdAt:
        type: string
      icon:
        type: string
      id:
        type: string
      name:
        type: string
      order:
        type: integer
      type:
        type: string
      updatedAt:
        type: string
    type: object
  handler.DashboardSummaryResponse:
    properties:
      month:
        type: integer
      previousTotal:
        type: number
      topCategories:
        items:
          $ref: '#/definitions/handler.CategoryAggregate'
        type: array
      totalSpent:
        type: number
      variationPct:
        type: number
      year:
        type: integer
    type: object
  handler.ExpenseRequest:
    properties:
      amount:
        type: number
      categoryId:
        type: string
      date:
        type: string
      description:
        type: string
      origin:
        type: string
      receipt:
        $ref: '#/definitions/handler.ReceiptInput'
      recurring:
        type: boolean
    type: object
  handler.ExpenseResponse:
    properties:
      amount:
        type: number
      category:
        $ref: '#/definitions/handler.CategoryResponse'
      categoryId:
        type: string
      createdAt:
        type: string
      date:
        type: string
      description:
        type: string
      id:
        type: string
      origin:
        type: string
      receipt:
        $ref: '#/definitions/handler.ReceiptResponse'
      recurring:
        type: boolean
      updatedAt:
        type: string
    type: object
  handler.ExpenseSummary:
    properties:
      averageValue:
        type: number
      totalAmount:
        type: number
      totalCount:
        type: integer
    type: object
  handler.ExpensesListResponse:
    properties:
      expenses:
        items:
          $ref: '#/definitions/handler.ExpenseResponse'
        type: array
      summary:
        $ref: '#/definitions/handler.ExpenseSummary'
    type: object
  handler.GenerateMealPlanRequest:
    properties:
      budget:
        type: number
      calorieGoal:
        type: integer
      dietaryPreference:
        type: string
      exclusions:
        items:
          type: string
        type: array
      servings:
        type: integer
      week:
        type: string
    type: object
  handler.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  handler.LogoutRequest:
    properties:
      allDevices:
        type: boolean
    type: object
  handler.MealItemResponse:
    properties:
      dayOfWeek:
        type: string
      estimatedCost:
        type: number
      id:
        type: string
      ingredients:
        items:
          type: string
        type: array
      instructions:
        type: string
      mealType:
        type: string
      title:
        type: string
    type: object
  handler.MealPlanResponse:
    properties:
      calorieGoal:
        type: integer
      createdAt:
        type: string
      estimatedCost:
        type: number
      generatedByAi:
        type: boolean
      id:
        type: string
      isoWeek:
        type: string
      items:
        items:
          $ref: '#/definitions/handler.MealItemResponse'
        type: array
    type: object
  handler.ReceiptInput:
    properties:
      extractedText:
        type: string
      filePath:
        type: string
      ocrConfidence:
        type: number
    type: object
  handler.ReceiptItem:
    properties:
      description:
        type: string
      quantity:
        type: number
      total:
        type: number
      unitPrice:
        type: number
    type: object
  handler.ReceiptResponse:
    properties:
      extractedText:
        type: string
      filePath:
        type: string
      id:
        type: string
      ocrConfidence:
        type: number
    type: object
  handler.ReceiptScanRequest:
    properties:
      amountHint:
        type: number
      currency:
        type: string
      imageBase64:
        type: string
      locale:
        type: string
      returnRaw:
        type: boolean
    type: object
  handler.ReceiptScanResponse:
    properties:
      confidence:
        type: number
      currency:
        type: string
      extractedText:
        type: string
      items:
        items:
          $ref: '#/definitions/handler.ReceiptItem'
        type: array
      model:
        type: string
      rawModelOutput:
        type: string
      savedExpense:
        $ref: '#/definitions/handler.ExpenseResponse'
      suggestedAmount:
        type: number
      suggestedDate:
        type: string
      tokenCostCents:
        type: integer
      tokensUsed:
        type: integer
    type: object
  handler.RegisterRequest:
    properties:
      currency:
        type: string
      email:
        type: string
      language:
        type: string
      monthlyLimit:
        type: number
      name:
        type: string
      password:
        type: string
      theme:
        type: string
    type: object
  handler.SyncJobResponse:
    properties:
      finishedAt:
        type: string
      id:
        type: string
      origin:
        type: string
      startedAt:
        type: string
      status:
        type: string
    type: object
  handler.SyncRequest:
    properties:
      origin:
        type: string
    type: object
  handler.TipResponse:
    properties:
      createdAt:
        type: string
      id:
        type: string
      relevance:
        type: integer
      source:
        type: string
      text:
        type: string
      type:
        type: string
    type: object
  handler.TokenUsageEntryResponse:
    properties:
      costInCents:
        type: integer
      createdAt:
        type: string
      id:
        type: string
      metadata:
        additionalProperties: true
        type: object
      promptTokens:
        type: integer
      requestId:
        type: string
      requestType:
        type: string
      responseTokens:
        type: integer
      totalTokens:
        type: integer
    type: object
  handler.TokenUsageListResponse:
    properties:
      entries:
        items:
          $ref: '#/definitions/handler.TokenUsageEntryResponse'
        type: array
      pagination:
        $ref: '#/definitions/handler.TokenUsagePagination'
      summary:
        $ref: '#/definitions/handler.TokenUsageSummary'
    type: object
  handler.TokenUsageListSuccess:
    properties:
      data:
        $ref: '#/definitions/handler.TokenUsageListResponse'
      message:
        type: string
    type: object
  handler.TokenUsagePagination:
    properties:
      limit:
        type: integer
      page:
        type: integer
      totalEntries:
        type: integer
    type: object
  handler.TokenUsageSummary:
    properties:
      totalCostCents:
        type: integer
      totalPromptTokens:
        type: integer
      totalResponseTokens:
        type: integer
      totalTokens:
        type: integer
    type: object
  handler.UpdateExpenseRequest:
    properties:
      amount:
        type: number
      categoryId:
        type: string
      date:
        type: string
      description:
        type: string
      origin:
        type: string
      receipt:
        $ref: '#/definitions/handler.ReceiptInput'
      recurring:
        type: boolean
      removeReceipt:
        type: boolean
    type: object
  handler.UserConfigResponse:
    properties:
      currency:
        type: string
      language:
        type: string
      monthlyLimit:
        type: number
      notificationsEnabled:
        type: boolean
      theme:
        type: string
    type: object
  handler.UserProfileSuccess:
    properties:
      data:
        $ref: '#/definitions/handler.UserResponse'
      message:
        type: string
    type: object
  handler.UserResponse:
    properties:
      active:
        type: boolean
      config:
        $ref: '#/definitions/handler.UserConfigResponse'
      createdAt:
        type: string
      email:
        type: string
      id:
        type: string
      lastLogin:
        type: string
      name:
        type: string
      updatedAt:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: contato@example.com
    name: Equipe Golang Finance
  description: API para gest√£o financeira pessoal com suporte a OCR de recibos.
  title: Golang Finance API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Valida credenciais e emite um novo token de sess√£o
      parameters:
      - description: Credenciais
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handler.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.AuthSuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.APIError'
      summary: Autenticar usu√°rio
      tags:
      - Auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Invalida a sess√£o atual ou todas as sess√µes do usu√°rio autenticado
      parameters:
      - description: Op√ß√µes de encerramento
        in: body
        name: body
        schema:
          $ref: '#/definitions/handler.LogoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.APISuccess'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.APIError'
      security:
      - Bearer: []
      summary: Encerrar sess√£o
      tags:
      - Auth
  /auth/me:
    get:
      description: Retorna os dados do usu√°rio autenticado
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.UserProfileSuccess'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.APIError'
      security:
      - Bearer: []
      summary: Perfil do usu√°rio
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Cria um usu√°rio, configura dados padr√£o e retorna a sess√£o autenticada
      parameters:
      - description: Dados de registro
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handler.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.AuthSuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.APIError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/handler.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.APIError'
      summary: Registrar novo usu√°rio
      tags:
      - Auth
  /categories:
    get:
      description: Retorna as categorias do usu√°rio autenticado
      parameters:
      - description: Filtra por status das categorias. Use true para apenas ativas,
          false para apenas inativas e deixe em branco ou use all para todas.
        enum:
        - "true"
        - "false"
        - all
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.CategoryListSuccess'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.APIError'
      security:
      - Bearer: []
      summary: Listar categorias
      tags:
      - Categorias
    post:
      consumes:
      - application/json
      description: Cria uma categoria personalizada para o usu√°rio
      parameters:
      - description: Dados da categoria
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handler.CategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.CategoryItemSuccess'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.APIError'
      security:
      - Bearer: []
      summary: Criar categoria
      tags:
      - Categorias
  /categories/{id}:
    delete:
      description: Marca uma categoria como inativa
      parameters:
      - description: Identificador da categoria
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.APISuccess'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.APIError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.APIError'
      security:
      - Bearer: []
      summary: Desativar categoria
      tags:
      - Categorias
    put:
      consumes:
      - application/json
      description: Atualiza dados de uma categoria existente
      parameters:
      - description: Identificador da categoria
        in: path
        name: id
        required: true
        type: string
      - description: Campos para atualiza√ß√£o
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handler.CategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.CategoryItemSuccess'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.APIError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.APIError'
      security:
      - Bearer: []
      summary: Atualizar categoria
      tags:
      - Categorias
  /dashboard/summary:
    get:
      description: Retorna totais do m√™s atual e compara√ß√£o com o m√™s anterior
      parameters:
      - description: M√™s (1-12)
        in: query
        name: month
        type: integer
      - description: Ano
        in: query
        name: year
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.DashboardSummaryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.APIError'
      security:
      - Bearer: []
      summary: Resumo do dashboard
      tags:
      - Dashboard
  /expenses:
    get:
      description: Lista despesas filtradas por m√™s e ano
      parameters:
      - description: M√™s (1-12)
        in: query
        name: month
        type: integer
      - description: Ano
        in: query
        name: year
        type: integer
      - description: Filtro por categoria
        in: query
        name: categoryId
        type: string
      - description: 'Origem: manual|ocr|ia'
        in: query
        name: origin
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ExpensesListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.APIError'
      security:
      - Bearer: []
      summary: Listar despesas
      tags:
      - Despesas
    post:
      consumes:
      - application/json
      description: Registra uma nova despesa para o usu√°rio autenticado
      parameters:
      - description: Dados da despesa
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handler.ExpenseRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ExpenseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.APIError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handler.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.APIError'
      security:
      - Bearer: []
      summary: Criar despesa
      tags:
      - Despesas
  /expenses/{id}:
    delete:
      description: Exclui uma despesa definitivamente
      parameters:
      - description: Identificador da despesa
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.APISuccess'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.APIError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.APIError'
      security:
      - Bearer: []
      summary: Remover despesa
      tags:
      - Despesas
    get:
      description: Retorna os detalhes de uma despesa espec√≠fica
      parameters:
      - description: Identificador da despesa
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ExpenseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.APIError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.APIError'
      security:
      - Bearer: []
      summary: Buscar despesa
      tags:
      - Despesas
    put:
      consumes:
      - application/json
      description: Atualiza campos de uma despesa existente
      parameters:
      - description: Identificador da despesa
        in: path
        name: id
        required: true
        type: string
      - description: Campos para atualiza√ß√£o
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handler.UpdateExpenseRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ExpenseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.APIError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handler.APIError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.APIError'
      security:
      - Bearer: []
      summary: Atualizar despesa
      tags:
      - Despesas
  /meal-plans:
    get:
      description: 'Retorna o plano de refei√ß√µes salvo para a semana ISO informada
        (padr√£o: semana atual)'
      parameters:
      - description: 'Semana no formato YYYY-Www (ex: 2024-W37)'
        in: query
        name: week
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.MealPlanResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.APIError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.APIError'
      security:
      - Bearer: []
      summary: Consultar plano de refei√ß√µes da semana
      tags:
      - Refei√ß√µes
  /meal-plans/generate:
    post:
      consumes:
      - application/json
      description: Cria um plano semanal com receitas baseadas nos itens de compras
        recentes. Usa heur√≠sticas se o modelo n√£o estiver dispon√≠vel.
      parameters:
      - description: Prefer√™ncias para gera√ß√£o
        in: body
        name: body
        schema:
          $ref: '#/definitions/handler.GenerateMealPlanRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.MealPlanResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.APIError'
      security:
      - Bearer: []
      summary: Gerar plano de refei√ß√µes com Gemini
      tags:
      - Refei√ß√µes
  /receipts/scan:
    post:
      consumes:
      - application/json
      description: Analisa uma imagem em Base64 usando Gemini e retorna extra√ß√µes
        estruturadas
      parameters:
      - description: Dados do recibo
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handler.ReceiptScanRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ReceiptScanResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.APIError'
      security:
      - Bearer: []
      summary: Processar recibo com OCR
      tags:
      - Recibos
  /sync/jobs:
    post:
      consumes:
      - application/json
      description: Salva o hist√≥rico de uma sincroniza√ß√£o conclu√≠da
      parameters:
      - description: Origens
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handler.SyncRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.SyncJobResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.APIError'
      security:
      - Bearer: []
      summary: Registrar sincroniza√ß√£o
      tags:
      - Sincroniza√ß√£o
  /tips:
    get:
      description: Retorna dicas ordenadas por relev√¢ncia para o usu√°rio autenticado
      parameters:
      - description: M√™s (1-12)
        in: query
        name: month
        type: integer
      - description: Ano
        in: query
        name: year
        type: integer
      - description: true para recalcular dicas antes de responder
        in: query
        name: refresh
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handler.TipResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.APIError'
      security:
      - Bearer: []
      summary: Listar dicas financeiras
      tags:
      - Dicas
  /tips/generate:
    post:
      description: Recalcula dicas com base nos gastos recentes e Gemini. Usa heur√≠sticas
        caso o modelo n√£o esteja dispon√≠vel.
      parameters:
      - description: M√™s (1-12)
        in: query
        name: month
        type: integer
      - description: Ano
        in: query
        name: year
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handler.TipResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.APIError'
      security:
      - Bearer: []
      summary: Gerar novas dicas financeiras
      tags:
      - Dicas
  /token-usage:
    get:
      description: Retorna o hist√≥rico de consumo de tokens do usu√°rio autenticado
        com totais agregados
      parameters:
      - description: N√∫mero m√°ximo de registros por p√°gina (1-200)
        in: query
        name: limit
        type: integer
      - description: P√°gina a ser retornada (>=1)
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.TokenUsageListSuccess'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.APIError'
      security:
      - Bearer: []
      summary: Listar consumo de tokens
      tags:
      - Token Usage
schemes:
- http
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
